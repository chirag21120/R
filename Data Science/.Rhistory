expected_value<- c(x%*%px)
expected_value
#Q2
f<-function(t){
a<-t*0.1*exp((-0.1)*t)
return(a)
}
Ex<-integrate(f,0,Inf)
Ex$value
#Q4
f2<- function(t){
a<- t*0.5*exp(-abs(t))
return(a)
}
f3<-function(t){
a<- t*t*0.5*exp(-abs(t))
return(a)
}
firstMoment<- integrate(f2,1,10)
firstMoment$value
secondMoment<-integrate(f3,1,10)
secondMoment$value
variance<- secondMoment$value - firstMoment$value*firstMoment$value
variance
#Q3
net_revenue <- function(x1){
rev<- 12*x1+ 2*(3-x1) - 18
return(rev)
}
#Q3
y<- c(0, 1, 2, 3)
py <- c(0.1, 0.2, 0.2, 0.5)
Ey<- sum(y*py)
Ey
Ey<- sum((x1,function(y) net_revenue(y))*py)
Ey<- sum(sapply(x1,function(y) net_revenue(y))*py)
Ey<- sum(sapply(x,function(y) net_revenue(y))*py)
Ey<- sum(sapply(x1,function(y) net_revenue(y))*py)
Ey<- sum(function(y) net_revenue(y)*py)
net_revenue <- 12*x1+ 2*(3-x1) - 18
net_revenue <- 12*y+ 2*(3-y) - 18
Ey<- sum(net_revenue*py)
Ey
#Q5
prob_y <- function(x){
return((3/4)*(1/4)^(x-1))
}
x_val<-3
y_val<- x_val^2
prob_x <- prob_y(y_val)
prob_x
x_values <- 1:5
expected_values <- numeric()
variances <- numeric()
for (x in x_values) {
y_value <- x^2
prob_Y <- calculate_prob_Y(y_value)
expected_Y <- y_value * prob_Y
expected_Y_squared <- (y_value^2) * prob_Y
variance_Y <- expected_Y_squared - (expected_Y^2)
expected_values <- c(expected_values, expected_Y)
variances <- c(variances, variance_Y)
cat("For X =", x, ":\n")
cat("Expected Value (E[Y]):", expected_Y, "\n")
cat("Variance (Var[Y]):", variance_Y, "\n\n")
}
for (x in x_values) {
y_value <- x^2
prob_Y <- calculate_prob_Y(y_val)
expected_Y <- y_value * prob_Y
expected_Y_squared <- (y_val^2) * prob_Y
variance_Y <- expected_Y_squared - (expected_Y^2)
expected_values <- c(expected_values, expected_Y)
variances <- c(variances, variance_Y)
cat("For X =", x, ":\n")
cat("Expected Value (E[Y]):", expected_Y, "\n")
cat("Variance (Var[Y]):", variance_Y, "\n\n")
}
for (x in x_values) {
y_value <- x^2
prob_Y <- prob_Y(y_val)
expected_Y <- y_value * prob_Y
expected_Y_squared <- (y_val^2) * prob_Y
variance_Y <- expected_Y_squared - (expected_Y^2)
expected_values <- c(expected_values, expected_Y)
variances <- c(variances, variance_Y)
cat("For X =", x, ":\n")
cat("Expected Value (E[Y]):", expected_Y, "\n")
cat("Variance (Var[Y]):", variance_Y, "\n\n")
}
for (x in x_values) {
y_value <- x^2
prob_Y <- prob_Y(y_val)
expected_Y <- y_value * prob_y
expected_Y_squared <- (y_val^2) * prob_y
variance_Y <- expected_Y_squared - (expected_Y^2)
expected_values <- c(expected_values, expected_Y)
variances <- c(variances, variance_Y)
cat("For X =", x, ":\n")
cat("Expected Value (E[Y]):", expected_Y, "\n")
cat("Variance (Var[Y]):", variance_Y, "\n\n")
}
for (x in x_values) {
y_value <- x^2
prob_Y <- prob_y(y_val)
expected_Y <- y_value * prob_y
expected_Y_squared <- (y_val^2) * prob_y
variance_Y <- expected_Y_squared - (expected_Y^2)
expected_values <- c(expected_values, expected_Y)
variances <- c(variances, variance_Y)
cat("For X =", x, ":\n")
cat("Expected Value (E[Y]):", expected_Y, "\n")
cat("Variance (Var[Y]):", variance_Y, "\n\n")
}
for (x in x_values) {
y_value <- x^2
prob_Y <- prob_y(y_val)
expected_Y <- y_val * prob_y
expected_Y_squared <- (y_val^2) * prob_y
variance_Y <- expected_Y_squared - (expected_Y^2)
expected_values <- c(expected_values, expected_Y)
variances <- c(variances, variance_Y)
cat("For X =", x, ":\n")
cat("Expected Value (E[Y]):", expected_Y, "\n")
cat("Variance (Var[Y]):", variance_Y, "\n\n")
}
#Q3
y1<- c(0, 1, 2, 3)
py1 <- c(0.1, 0.2, 0.2, 0.5)
x_val<-c(1,2,3,4,5)
y_val<- x_val^2
#Q5
prob<- function(y){
return((3/4)*(1/4)^((y^0.5)-1))
}
prob_y <- prob(y_val)
Ey2 <- sum(y_val*prob_y)
Ey2
second<- sum(y_val*y_val*prob_y)
var <- second - Ey2^2
var
#Q1
x <- c(0, 1, 2, 3, 4)
px <- c(0.41, 0.37, 0.16, 0.05, 0.01)
expected_value <- sum(x*px)
expected_value
expected_value <- weighted.mean(x,px)
expected_value
expected_value<- c(x%*%px)
expected_value
#Q2
f<-function(t){
a<-t*0.1*exp((-0.1)*t)
return(a)
}
Ex<-integrate(f,0,Inf)
Ex$value
#Q4
f2<- function(t){
a<- t*0.5*exp(-abs(t))
return(a)
}
f3<-function(t){
a<- t*t*0.5*exp(-abs(t))
return(a)
}
firstMoment<- integrate(f2,1,10)
firstMoment$value
secondMoment<-integrate(f3,1,10)
secondMoment$value
variance<- secondMoment$value - firstMoment$value*firstMoment$value
variance
#Q3
y1<- c(0, 1, 2, 3)
py1 <- c(0.1, 0.2, 0.2, 0.5)
net_revenue <- 12*y1+ 2*(3-y1) - 18
Ey<- sum(net_revenue*py1)
Ey
#Q5
prob<- function(y){
return((3/4)*(1/4)^((y^0.5)-1))
}
x_val<-c(1,2,3,4,5)
y_val<- x_val^2
prob_y <- prob(y_val)
Ey2 <- sum(y_val*prob_y)
second<- sum(y_val*y_val*prob_y)
var <- second - Ey2^2
var
#Complex Data type  
variable_complex<- 3+2i  
#Complex Data type  
variable_complex<-3+2i
#Complex Data type  
variable_complex<-3+2i
cat(variable_complex,"\n")  
#Complex Data type
variable_complex<-3+2i
cat(variable_complex,"\n")
cat("The data type of variable_complex is ",class(variable_complex),"\n\n")
#Character Data type
variable_char<- "Learning r programming"
cat(variable_char,"\n")
cat("The data type of variable_char is ",class(variable_char),"\n\n")
#Raw Data type
variable_raw<- charToRaw("Learning r programming")
cat(variable_raw,"\n")
cat("The data type of variable_char is ",class(variable_raw),"\n\n")
log3(3)
log2(3)
exp()
exp(1)
pi
cos(pi)
sqrt(100)
x <- switch(
2,
"first",
"second",
"third",
"fourth" )
print(x)
y<-c(1,5,15,20)
seq(10,25,along.with = y)
seq(10,25)
y<-c(1,5,15,21)
seq(10,25,along.with = y)
y<-c(1,5,17,21)
seq(10,25,along.with = y)
y<-c(1,5)
seq(10,25,along.with = y)
y<-c(1,5,15,20)
seq(10,25,along.with = y)
seq_len(10)
v <- c("Hello Students","while loop")
cnt <- 2
while (cnt < 7) {
print(v)
cnt = cnt + 1
}
v <- c("Hello","loop")
count2 <- 2
repeat {
print(v)
count2 <- count2+1
if(count2 > 5) {
break
}
}
v <- LETTERS[1:6]
for ( i in v) {
if (i == "D") {
next
}
print(i)
}
g = function(x,y) (x+2*y)/3
g(1,2)
g(2,1)
val1 = 6
val2 = 7
val3 = "s"
result = switch(
val3,
"a"= cat("Addition =", val1 + val2),
"d"= cat("Subtraction =", val1 - val2),
"r"= cat("Division = ", val1 / val2),
"s"= cat("Multiplication =", val1 * val2),
"m"= cat("Modulus =", val1 %% val2),
"p"= cat("Power =", val1 ^ val2)
)
print(result)
val3 = "d"
result = switch(
val3,
"a"= cat("Addition =", val1 + val2),
"d"= cat("Subtraction =", val1 - val2),
"r"= cat("Division = ", val1 / val2),
"s"= cat("Multiplication =", val1 * val2),
"m"= cat("Modulus =", val1 %% val2),
"p"= cat("Power =", val1 ^ val2)
)
print(result)
result = switch(
val3,
"a"= cat("Addition =", val1 + val2),
"d"= cat("Subtraction =", val1 - val2),
"r"= cat("Division = ", val1 / val2),
"s"= cat("Multiplication =", val1 * val2),
"m"= cat("Modulus =", val1 %% val2),
"p"= cat("Power =", val1 ^ val2)
)
print(result)
val3 = "c"
result = switch(
val3,
"a"= cat("Addition =", val1 + val2),
"d"= cat("Subtraction =", val1 - val2),
"r"= cat("Division = ", val1 / val2),
"s"= cat("Multiplication =", val1 * val2),
"m"= cat("Modulus =", val1 %% val2),
"p"= cat("Power =", val1 ^ val2),
"c" = return(val1+val2)
)
print(result)
result = switch(
val3,
"a"= cat("Addition =", val1 + val2),
"d"= cat("Subtraction =", val1 - val2),
"r"= cat("Division = ", val1 / val2),
"s"= cat("Multiplication =", val1 * val2),
"m"= cat("Modulus =", val1 %% val2),
"p"= cat("Power =", val1 ^ val2)
)
val3 = "d"
result = switch(
val3,
"a"= cat("Addition =", val1 + val2),
"d"= cat("Subtraction =", val1 - val2),
"r"= cat("Division = ", val1 / val2),
"s"= cat("Multiplication =", val1 * val2),
"m"= cat("Modulus =", val1 %% val2),
"p"= cat("Power =", val1 ^ val2)
)
seq(5.5,8)
seq(-1,-10)
seq.int(from = 1,to= 30, length.out = 10)
seq.int(from = 1,to= 30, length.out = 10)
seq.int(from = 1,to= 30, length.out = 10)
#Calling a Function with Default Argument
# Create a function with arguments.
new.function <- function(a = 3, b = 6) {
result <- a * b
print(result)
}
# Call the function without giving any argument.
new.function()
# Call the function with giving new values of the argument.
new.function(9,5)
matrix(data = 1:6, nrow = 2, ncol = 3, byrow = TRUE)
matrix(data = 1:6, nrow = 2, ncol = 3)
, byrow = TRUE
matrix(data = 1:6, nrow = 2, ncol = 3, byrow = TRUE)
mat1 <- matrix(data = 1:6, nrow = 2, ncol = 3, byrow = TRUE)
rownames(mat1)      #INITIALLY NO ROWNAMES
colnames(mat1)      #INITIALLY NO COLUMN NAMES
rownames(mat1) <- c("Row 1", "Row 2")                   #ASSIGNING ROW NAME
colnames(mat1) <- c("Col 1", "Col 2")          #ASSIGNING COLUMN NAME
colnames(mat1) <- c("Col 1", "Col 2", "Col 3")          #ASSIGNING COLUMN NAME
mat1[,"Col 2"]
l2 <- list(vec = c(1, 3, 5, 7, 9), mat = matrix(data = c(1, 2, 3), nrow = 3))
l2
patientID <- c(1, 2, 3, 4)
age <- c(25, 34, 28, 52)
diabetes <- c("Type1", "Type2", "Type1", "Type1")
status <- c("Poor", "Improved", "Excellent", "Poor")
patientdata <- data.frame(patientID, age, diabetes, status)
patientdata
age <- c(25, 34, 28)
patientdata <- data.frame(patientID, age, diabetes, status)
patientID <- c(1, 2, 3, 4)
age <- c(25, 34, 28, 52)
diabetes <- c("Type1", "Type2", "Type1", "Type1")
status <- c("Poor", "Improved", "Excellent", "Poor")
patientdata <- data.frame(patientID, age, diabetes, status)
patientdata
patientdata[1:2]
patientdata[3]
patientdata$age
table(patientdata$diabetes, patientdata$status)
summary(mtcars$mpg)
plot(mtcars$mpg, mtcars$disp)
plot(mtcars$mpg, mtcars$wt)
plot(mtcars$mpg, mtcars$wt)
plot(mtcars$mpg, mtcars$disp)
plot(mtcars$mpg, mtcars$wt)
attach(mtcars)
summary(mpg)
plot(mpg, disp)
plot(mpg, wt)
detach(mtcars)
mpg <- c(25, 36, 47)    #MPG IS ALREADY A FIELD IN MTCARS DATASET
attach(mtcars)
plot(mpg, wt)
detach(mtcars)
mpg
attach(mtcars)
with(mtcars, {
summary(mpg, disp, wt)
plot(mpg, disp)
plot(mpg, wt)
})
summary(mpg, disp, wt)
plot(mpg, disp)
with(mtcars, {
summary(mpg, disp, wt)
plot(mpg, disp)
plot(mpg, wt)
})
plot(mpg, disp)
spl <- split(mtcars, mtcars$cyl)
spl
mtcars
best2 <- lapply(spl, function(x) tail(x[order(x$mpg),], 2))
best2
do.call(rbind,best2)
charvar <- rep(c("n", "c"), each = 3)
f <- factor(charvar)
f
levels(f)
Weekdays <- factor(c("Monday", "Wednesday", "Thursday", "Tuesday", "Friday", "Sunday", "Saturday"))
Weekdays
Weekdays <- factor(Weekdays, levels=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday", "Sunday"), ordered=TRUE)
Weekdays
Weekend <- subset(Weekdays, Weekdays == "Saturday" | Weekdays == "Sunday")
Weekend
Weekend <- droplevels(Weekend)
Weekend
charvar <- rep(c("W", "n", "c"), times=c(17,20,14))
f <- factor(charvar)
levels(f)
vec<- c(3,4,5,6,7,8)
vec2<- c("aaple","banr",9,10,"kl")
vec +vec2
vec2<- c(9,10,11,12)
vec +vec2
vec2<- c(9,10,11)
vec +vec2
dir()
setwd("D:/R/Data Science")
wd()
dir()
ls
ls()
dir()
data<- read.csv('daily_show_guests.csv')
data.head()
data
head(df,10)
head(data,10)
colnames(data)
colnames(data) <- c('year','job','date','category','guest_name')
colnames(data)
#Q3. Create a report having year, date, and guest_name
report <- data %>% select(year,date,guest_name)
#Q3. Create a report having year, date, and guest_name
report <- data.select(year,date,guest_name)
#Q3. Create a report having year, date, and guest_name
report <- data[,c("year","date","guest_name")]
write.csv(report,"report.csv")
dir()
install.packages("dplyr")
report<- read.csv("report.csv")
report
#Q4. Use “select” (dplyr) function to print all the record except “year”.
library(dplyr)
data %>% select("year")
data %>% select(-year)
#Q5. Extract the list of peoples who are “actor” only name is “ABC”
abc_actors <- daily_show_data %>%
filter(job == "actor" & grepl("ABC", guest, ignore.case = TRUE)) %>%
select(year, date, guest)
#Q5. Extract the list of peoples who are “actor” only name is “ABC”
abc_actors <- data %>%
filter(job == "actor" & grepl("ABC", guest, ignore.case = TRUE)) %>%
select(year, date, guest)
#Q5. Extract the list of peoples who are “actor” only name is “ABC”
abc_actors <- data %>%
filter(job == "actor" & grepl("ABC", guest_name, ignore.case = TRUE)) %>%
select(year, date, guest_name)
colnames(data)
#Q5. Extract the list of peoples who are “actor” only name is “ABC”
abc_actors <- data %>%
filter(job == "actor" & grepl("ABC", guest_name, ignore.case = TRUE)) %>%
select(year, date, guest_name)
#Q5. Extract the list of peoples who are “actor” only name is “ABC”
abc_actors <- data %>%
filter(job == "actor" & grepl("ABC", guest_name, ignore.case = TRUE)) %>%
select(year, date, guest_name)
abc_actors
#Q5. Extract the list of peoples who are “actor” only name is “ABC”
abc_actors <- data %>%
filter(job == "actor" & grepl("Bob Dole", guest_name, ignore.case = TRUE)) %>%
select(year, date, guest_name)
abc_actors
#Q5. Extract the list of peoples who are “actor” only name is “ABC”
abc_actors <- data %>%
filter(job == "actor" & grepl("Jimmy Smits", guest_name, ignore.case = TRUE)) %>%
select(year, date, guest_name)
abc_actors
#alternate
abc_actors <- data %>% filter(job=="actor" & guest_name=="Jimmy Smits" )
abc_actors
#Q6. Arrange the records in-order of date.
arranged_data <- data %>%
arrange(Show)
#Q6. Arrange the records in-order of date.
arranged_data <- data %>%
arrange(date)
arranged_data
#Q6. Arrange the records in-order of date.
arranged_data <- data %>%
arrange(date)
arranged_data
#Q7. Add one column to the database with the name “Experience”. (Help: mutate() function in dplyr)
mutated_data <- daily_show_data %>%
mutate(Experience = year - 1970)
#Q7. Add one column to the database with the name “Experience”. (Help: mutate() function in dplyr)
mutated_data <- data %>%
mutate(Experience = year - 1970)
mutated_data
write.csv(mutated_data,"mutated.csv")
